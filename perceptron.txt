import numpy as np
def unitStep(v):
    if v >= 0:
        return 1
    else:
        return 0
def perceptronModel(x,w,b):
    v = np.dot(w,x) + b
    y = unitStep(v)
    retun y
def Not_logicFunction(x):
    wNot = -1
    bNot = 0.5
    return perceptronModel(x,wNot, bNot)

def OR_logicFunction(x):
    w= np.array([1, 1])
    bOR = -0.5
    return perceptronModel (x, w, bOR)

def NOR_logicFunction(x):
    output_OR = OR_logicFunction(x)
    output_NOT = NOT_logicFunction(output_OR) 
    return output_NOT

def XOR_logicFunction(x):
    wXOR = np.array([1, 1])
    bXOR = -0.5
    h1 = OR_logicFunction(x)
    h2 = Not_logicFunction(x)
    x_new = np.array([h1, h2])
    return perceptronModel(x_new, wXOR, bXOR)

def XNOR_logicFunction(x):
    output_XOR = XOR_logicFunction(x)
    output_NOT = Not_logicFunction(output_XOR)
    return output_NOT

def NAND_logicFunction(x):
    output_AND = AND_logicFunction(x)
    output_NOT = Not_logicFunction(output_AND)
    return output_NOT

test1 = np.array([0,1])
test2 = np.array([1,1])
test3 = np.array([0,0])
test4 = np.array([1,0])

print("NOR({}, {}) = {}".format(0,1, NOR_logicFunction(test1)))
print("NOR({}, {}) = {}".format(1,1, NOR_logicFunction(test1)))
print("NOR({}, {}) = {}".format(0,0, NOR_logicFunction(test1)))
print("NOR({}, {}) = {}".format(1,0, NOR_logicFunction(test1)))
print("XOR({}, {}) = {}".format(0, 1, XOR_logicFunction(test1)))
print("XOR({}, {}) = {}".format(1, 1, XOR_logicFunction(test2)))
print("XOR({}, {}) = {}".format(0, 0, XOR_logicFunction(test3)))
print("XOR({}, {}) = {}".format(1, 0, XOR_logicFunction(test4)))

print("XNOR({}, {}) = {}".format(0, 1, XNOR_logicFunction(test1)))
print("XNOR({}, {}) = {}".format(1, 1, XNOR_logicFunction(test2)))
print("XNOR({}, {}) = {}".format(0, 0, XNOR_logicFunction(test3)))
print("XNOR({}, {}) = {}".format(1, 0, XNOR_logicFunction(test4)))

print("NAND({}, {}) = {}".format(0, 1, NAND_logicFunction(test1)))
print("NAND({}, {}) = {}".format(1, 1, NAND_logicFunction(test2)))
print("NAND({}, {}) = {}".format(0, 0, NAND_logicFunction(test3)))
print("NAND({}, {}) = {}".format(1, 0, NAND_logicFunction(test4)))