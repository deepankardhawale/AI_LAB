from collections import deque

class TreeNode:
    def __init__(self, value):
        self.value = value
        self.children = []

def build_tree():
    # Create nodes
    root = TreeNode(1)
    node2 = TreeNode(2)
    node3 = TreeNode(3)
    node4 = TreeNode(4)
    node5 = TreeNode(5)
    node6 = TreeNode(6)
    node7 = TreeNode(7)
    
    # Connect nodes
    root.children = [node2, node3]
    node2.children = [node4, node5]
    node3.children = [node6, node7]
    
    return root

def bfs(root):
    if not root:
        return []
    
    queue = deque([root])
    result = []
    
    while queue:
        node = queue.popleft()
        result.append(node.value)
        queue.extend(node.children)
    
    return result

def dfs(root):
    if not root:
        return []
    
    stack = [root]
    result = []
    
    while stack:
        node = stack.pop()
        result.append(node.value)
        stack.extend(reversed(node.children))
    
    return result

# Build the tree
tree_root = build_tree()

# Perform BFS and DFS
print("BFS:", bfs(tree_root))
print("DFS:", dfs(tree_root))
